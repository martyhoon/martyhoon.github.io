I"<p><br /></p>

<p style="font-size : 10px; color : #e9e9e9"> 아래 글은 공부하고 기억하기 위해 남겨놓는 글이다 </p>

<p>   이번에는 데이터베이스에서 요청한 데이터를 받아 화면에 표시할 때 사용하는 Promise에 대해 공부해보겠다.</p>

<h3 id="-promise란">🔶 Promise란?</h3>

<p>   Promise는 JS 비동기 처리에 사용된느 객체이다. 주로 Get 방식을 요청할 때 사용한다. 그렇다면 왜 사용하는 것일까? <span style="border-bottom : 3px soild #be4e7f8; box-shadow : inset 0 -4px 0 #b4e7f8;"> 만약 내가 데이터를 보내달라고 요청했는데 데이터를 모두 받아오기 전에 화면에 데이터를 표시하려고 하면 오류가 발생한다. 이를 해결하기 위한 객체이다.</span></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// new Promise() 객체 추가</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 데이터를 받으면 resolve() 호출</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Request is failed</span><span class="dl">"</span><span class="p">));</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// getData()의 실행이 끝나면 호출되는 then()</span>
<span class="nx">getData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tableData</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// resolve()의 결과 값이 여기로 전달됨</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tableData</span><span class="p">);</span> <span class="c1">// $.get()의 reponse 값이 tableData에 전달 </span>

<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// reject 시 Error 출력</span>
<span class="p">});</span>
</code></pre></div></div>
<h3 id="-promise의-3가지-상태">🔶 Promise의 3가지 상태</h3>

<p>3가지 상태는 Promise의 처리 과정을 의미한다. <code class="language-plaintext highlighter-rouge">new Promise()</code>로 Promise를 생성하고 종료할 때까지 3가지 상태를 갖는다.</p>

<ul>
  <li>Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태</li>
  <li>Fullfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태</li>
  <li>Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태</li>
</ul>

<h4 id="pending">Pending</h4>

<p><code class="language-plaintext highlighter-rouge">new Promise()</code> 메서드를 호출하면 대기 상태가 된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="fullfilled">Fullfilled</h4>

<p>여기서 콜백 함수의 인자 <code class="language-plaintext highlighter-rouge">resolve</code>를 아래와 같이 실행되면 이행 상태가 된다. 이후 <code class="language-plaintext highlighter-rouge">then</code>을 이용하여 처리 결과 값을 받을 수 있다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getData</span><span class="p">(){</span>
<span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
   <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="p">}</span>

<span class="nx">getData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolvedData</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">resolvedData</span><span class="p">);</span> <span class="c1">// 100</span>
<span class="p">});</span>

</code></pre></div></div>

<h4 id="rejected">Rejected</h4>

<p><code class="language-plaintext highlighter-rouge">new Promise()</code>로 프로미스 객체를 생성하면 콜백 함수 인자로 <code class="language-plaintext highlighter-rouge">resolve</code>와 <code class="language-plaintext highlighter-rouge">reject</code>를 사용할 수 있다고 했습니다. 여기서 <code class="language-plaintext highlighter-rouge">reject</code>를 아래와 같이 호출하면 실패(Rejected) 상태가 됩니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">reject</span><span class="p">();</span>
<span class="p">});</span>

</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// reject()의 결과 값 Error를 err에 받음</span>
<span class="nx">getData</span><span class="p">().</span><span class="nx">then</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// Error: Request is failed</span>
<span class="p">});</span>

</code></pre></div></div>
:ET